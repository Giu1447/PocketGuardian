/**
 * Background-Task-Service f√ºr Hintergrundausf√ºhrung
 * SICHERHEITSMODUS: Vereinfacht f√ºr maximale Stabilit√§t
 * ERWEITERT: Lichtsensor-√úberwachung f√ºr Pocket-Erkennung
 */

import * as BackgroundFetch from 'expo-background-fetch';
import { LightSensor } from 'expo-sensors';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_MOTION_TASK = 'background-motion-detection';
const BACKGROUND_LIGHT_TASK = 'background-light-sensor-fetch';
const DARK_THRESHOLD = 3; // Lux-Wert f√ºr "im Pocket" - auf 3 reduziert (noch sensibler)

// Speichern des Pocket-Zustands und Callback
let currentPocketState = false;
let onPocketStateChangedCallback: ((inPocket: boolean) => void) | null = null;

// Vereinfachter Background-Task f√ºr Bewegungserkennung
TaskManager.defineTask(BACKGROUND_MOTION_TASK, async ({ data, error }) => {
  try {
    console.log('üîÑ Background-Task ausgef√ºhrt (vereinfacht):', new Date().toISOString());
    
    if (error) {
      console.error('Background-Task Fehler:', error);
      return BackgroundFetch.BackgroundFetchResult.Failed;
    }
    
    // Minimale Hintergrundaktivit√§t ohne Service-Abh√§ngigkeiten
    console.log('‚úÖ Hintergrund√ºberwachung l√§uft');
    return BackgroundFetch.BackgroundFetchResult.NoData;

  } catch (error) {
    console.error('‚ùå Kritischer Fehler im Background-Task:', error);
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
});

// NEU: Background-Task f√ºr Lichtsensor (Pocket-Erkennung)
TaskManager.defineTask(BACKGROUND_LIGHT_TASK, async ({ data, error }) => {
  const now = new Date();
  console.log(`üí° [${now.toISOString()}] Background Lichtsensor-Task l√§uft...`);

  try {
    if (error) {
      console.error('Lichtsensor Background-Task Fehler:', error);
      return BackgroundFetch.BackgroundFetchResult.Failed;
    }

    // Berechtigungen pr√ºfen
    const { status } = await LightSensor.getPermissionsAsync();
    if (status !== 'granted') {
      console.warn('‚ö†Ô∏è Lichtsensor-Berechtigung nicht erteilt f√ºr Background-Task.');
      return BackgroundFetch.BackgroundFetchResult.NoData;
    }

    // Lichtsensor-Wert lesen (mit Timeout)
    const getLightReading = new Promise<number>((resolve, reject) => {
      let subscription: any;
      const timeout = setTimeout(() => {
        subscription?.remove();
        reject(new Error('Timeout beim Lesen des Lichtsensors.'));
      }, 2000); // 2 Sekunden Timeout

      subscription = LightSensor.addListener(({ illuminance }) => {
        clearTimeout(timeout);
        subscription.remove();
        resolve(illuminance);
      });
    });

    const lightLevel = await getLightReading;
    console.log('üí° Background: Lichtst√§rke:', lightLevel.toFixed(2), 'lux');

    // Pr√ºfe, ob sich der Pocket-Status ge√§ndert hat
    const newPocketState = lightLevel < DARK_THRESHOLD;
    const stateChanged = newPocketState !== currentPocketState;
    
    if (newPocketState) {
      console.log('üåë Ger√§t ist in dunkler Umgebung (im Pocket?) - Lichtst√§rke:', lightLevel.toFixed(2));
      
      // Aktualisiere den Pocket-Status
      currentPocketState = true;
      
      // Aufruf des Callbacks f√ºr die Pocket-Erkennung (nur wenn sich der Status ge√§ndert hat)
      if (onPocketStateChangedCallback && stateChanged) {
        try {
          onPocketStateChangedCallback(true);
          console.log('‚úÖ Pocket-Status-Callback mit true aufgerufen');
        } catch (error) {
          console.error('‚ùå Fehler beim Ausf√ºhren des Pocket-Callbacks:', error);
        }
      }
      
    } else {
      console.log('üåû Ger√§t ist in heller Umgebung - Lichtst√§rke:', lightLevel.toFixed(2));
      
      // Aktualisiere den Pocket-Status
      currentPocketState = false;
      
      // Aufruf des Callbacks f√ºr die Nicht-Pocket-Erkennung (nur wenn sich der Status ge√§ndert hat)
      if (onPocketStateChangedCallback && stateChanged) {
        try {
          onPocketStateChangedCallback(false);
          console.log('‚úÖ Pocket-Status-Callback mit false aufgerufen');
        } catch (error) {
          console.error('‚ùå Fehler beim Ausf√ºhren des Pocket-Callbacks:', error);
        }
      }
    }

    return BackgroundFetch.BackgroundFetchResult.NewData;
  } catch (error) {
    console.error('‚ùå Lichtsensor Background-Task fehlgeschlagen:', error);
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
});

class BackgroundTaskService {
  private isRegistered = false;
  private isLightSensorRegistered = false;
  private onPocketStateChanged: ((inPocket: boolean) => void) | null = null;

  /**
   * Registriert Background-Tasks - Vereinfacht f√ºr Stabilit√§t
   */
  public async registerBackgroundTasks(): Promise<boolean> {
    try {
      // Pr√ºfe, ob Background-Fetch verf√ºgbar ist
      const status = await BackgroundFetch.getStatusAsync();
      if (status === BackgroundFetch.BackgroundFetchStatus.Restricted ||
          status === BackgroundFetch.BackgroundFetchStatus.Denied) {
        console.warn('‚ö†Ô∏è Background-Fetch nicht verf√ºgbar. Status:', status);
        return false;
      }

      // Pr√ºfe, ob Task bereits registriert ist
      const isAlreadyRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_MOTION_TASK);
      if (isAlreadyRegistered) {
        console.log('‚ÑπÔ∏è Background-Task bereits registriert');
        this.isRegistered = true;
        return true;
      }

      // Registriere Background-Fetch mit minimaler Konfiguration
      await BackgroundFetch.registerTaskAsync(BACKGROUND_MOTION_TASK, {
        minimumInterval: 60000, // 1 Minute f√ºr Stabilit√§t
        stopOnTerminate: false,
        startOnBoot: false, // Deaktiviert f√ºr Stabilit√§t
      });

      this.isRegistered = true;
      console.log('‚úÖ Background-Tasks erfolgreich registriert (vereinfacht)');
      return true;

    } catch (error) {
      console.error('‚ùå Fehler beim Registrieren der Background-Tasks:', error);
      this.isRegistered = false;
      return false;
    }
  }

  /**
   * Deregistriert Background-Tasks
   */
  public async unregisterBackgroundTasks(): Promise<void> {
    try {
      const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_MOTION_TASK);
      if (isRegistered) {
        await TaskManager.unregisterTaskAsync(BACKGROUND_MOTION_TASK);
        console.log('‚úÖ Background-Tasks deregistriert');
      }
      this.isRegistered = false;
    } catch (error) {
      console.error('‚ùå Fehler beim Deregistrieren der Background-Tasks:', error);
    }
  }

  /**
   * Startet Background-√úberwachung - Vereinfacht
   */
  public async startBackgroundMonitoring(): Promise<void> {
    try {
      console.log('üöÄ Starte Hintergrund√ºberwachung (vereinfacht)...');
      
      if (!this.isRegistered) {
        const success = await this.registerBackgroundTasks();
        if (!success) {
          console.warn('‚ö†Ô∏è Background-Tasks nicht verf√ºgbar');
          return;
        }
      }
      
      console.log('‚úÖ Hintergrund√ºberwachung aktiv');
    } catch (error) {
      console.error('‚ùå Fehler beim Starten der Hintergrund√ºberwachung:', error);
    }
  }

  /**
   * Stoppt Background-√úberwachung
   */
  public async stopBackgroundMonitoring(): Promise<void> {
    try {
      console.log('‚èπÔ∏è Stoppe Hintergrund√ºberwachung...');
      // Behalte Tasks registriert, aber deaktiviere √úberwachung
      console.log('‚úÖ Hintergrund√ºberwachung pausiert');
    } catch (error) {
      console.error('‚ùå Fehler beim Stoppen der Hintergrund√ºberwachung:', error);
    }
  }

  /**
   * Gibt den aktuellen Status zur√ºck
   */
  public async getBackgroundStatus(): Promise<{ available: boolean, registered: boolean, status: string }> {
    try {
      const status = await BackgroundFetch.getStatusAsync();
      const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_MOTION_TASK);
      
      return {
        available: status === BackgroundFetch.BackgroundFetchStatus.Available,
        registered: isRegistered,
        status: status ? this.getStatusString(status) : 'Unbekannt'
      };
    } catch (error) {
      console.error('‚ùå Fehler beim Abrufen des Background-Status:', error);
      return {
        available: false,
        registered: false,
        status: 'Fehler'
      };
    }
  }

  /**
   * Konvertiert Status zu String
   */
  private getStatusString(status: BackgroundFetch.BackgroundFetchStatus): string {
    switch (status) {
      case BackgroundFetch.BackgroundFetchStatus.Available:
        return 'Verf√ºgbar';
      case BackgroundFetch.BackgroundFetchStatus.Denied:
        return 'Verweigert';
      case BackgroundFetch.BackgroundFetchStatus.Restricted:
        return 'Eingeschr√§nkt';
      default:
        return 'Unbekannt';
    }
  }

  /**
   * Gibt den aktuellen Pocket-Status zur√ºck
   */
  public isInPocket(): boolean {
    return currentPocketState;
  }
  
  /**
   * Gibt den aktuellen Status des Lichtsensors zur√ºck
   */
  public isLightSensorRunning(): boolean {
    return this.isLightSensorRegistered;
  }
  
  /**
   * F√ºhrt einen einmaligen Lichtsensor-Scan durch und gibt den Wert zur√ºck
   */
  public async getCurrentLightLevel(): Promise<number | null> {
    try {
      // Berechtigungen pr√ºfen
      const { status } = await LightSensor.getPermissionsAsync();
      if (status !== 'granted') {
        console.warn('‚ö†Ô∏è Lichtsensor-Berechtigung nicht erteilt');
        return null;
      }
      
      // Lichtsensor-Wert lesen (mit Timeout)
      const getLightReading = new Promise<number>((resolve, reject) => {
        let subscription: any;
        const timeout = setTimeout(() => {
          subscription?.remove();
          reject(new Error('Timeout beim Lesen des Lichtsensors.'));
        }, 2000); // 2 Sekunden Timeout

        subscription = LightSensor.addListener(({ illuminance }) => {
          clearTimeout(timeout);
          subscription.remove();
          resolve(illuminance);
        });
      });

      const lightLevel = await getLightReading;
      console.log('üí° Lichtst√§rke (manueller Scan):', lightLevel.toFixed(2), 'lux');
      
      return lightLevel;
    } catch (error) {
      console.error('‚ùå Fehler beim Lesen des Lichtsensors:', error);
      return null;
    }
  }

  /**
   * Setzt den Callback f√ºr Pocket-Status-√Ñnderungen
   */
  public setPocketStateCallback(callback: ((inPocket: boolean) => void) | null): void {
    this.onPocketStateChanged = callback;
    onPocketStateChangedCallback = callback;
    console.log('‚úÖ Pocket-State-Callback konfiguriert');
  }

  /**
   * Registriert den Lichtsensor-Background-Task
   */
  public async registerLightSensorTask(): Promise<boolean> {
    try {
      // Pr√ºfe Lichtsensor-Berechtigung
      const { status } = await LightSensor.requestPermissionsAsync();
      if (status !== 'granted') {
        console.warn('‚ö†Ô∏è Lichtsensor-Berechtigung nicht erteilt');
        return false;
      }

      // Pr√ºfe, ob Background-Fetch verf√ºgbar ist
      const fetchStatus = await BackgroundFetch.getStatusAsync();
      if (fetchStatus === BackgroundFetch.BackgroundFetchStatus.Restricted ||
          fetchStatus === BackgroundFetch.BackgroundFetchStatus.Denied) {
        console.warn('‚ö†Ô∏è Background-Fetch nicht verf√ºgbar. Status:', fetchStatus);
        return false;
      }

      // Pr√ºfe, ob Task bereits registriert ist
      const isAlreadyRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LIGHT_TASK);
      if (isAlreadyRegistered) {
        console.log('‚ÑπÔ∏è Lichtsensor-Background-Task bereits registriert');
        this.isLightSensorRegistered = true;
        return true;
      }

      // Registriere Background-Fetch f√ºr Lichtsensor
      await BackgroundFetch.registerTaskAsync(BACKGROUND_LIGHT_TASK, {
        minimumInterval: 15, // 15 Sekunden
        stopOnTerminate: false,
        startOnBoot: true, // Nach Neustart des Ger√§ts starten (nur Android)
      });

      console.log('‚úÖ Lichtsensor-Background-Task erfolgreich registriert');
      this.isLightSensorRegistered = true;
      
      // Setze minimales Intervall (f√ºr Android)
      await BackgroundFetch.setMinimumIntervalAsync(15);
      
      return true;
    } catch (error) {
      console.error('‚ùå Fehler beim Registrieren des Lichtsensor-Tasks:', error);
      return false;
    }
  }

  /**
   * Deregistriert den Lichtsensor-Background-Task
   */
  public async unregisterLightSensorTask(): Promise<void> {
    try {
      const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LIGHT_TASK);
      if (isRegistered) {
        await TaskManager.unregisterTaskAsync(BACKGROUND_LIGHT_TASK);
        console.log('‚úÖ Lichtsensor-Background-Task deregistriert');
      }
      this.isLightSensorRegistered = false;
    } catch (error) {
      console.error('‚ùå Fehler beim Deregistrieren des Lichtsensor-Tasks:', error);
    }
  }

  /**
   * Startet die Pocket-Erkennung via Lichtsensor
   */
  public async startPocketDetection(): Promise<boolean> {
    try {
      console.log('üöÄ Starte Pocket-Erkennung via Lichtsensor...');
      
      if (!this.isLightSensorRegistered) {
        const success = await this.registerLightSensorTask();
        if (!success) {
          console.warn('‚ö†Ô∏è Lichtsensor-Task konnte nicht registriert werden');
          return false;
        }
      }
      
      console.log('‚úÖ Pocket-Erkennung aktiv');
      return true;
    } catch (error) {
      console.error('‚ùå Fehler beim Starten der Pocket-Erkennung:', error);
      return false;
    }
  }

  /**
   * Stoppt die Pocket-Erkennung via Lichtsensor
   */
  public async stopPocketDetection(): Promise<void> {
    try {
      console.log('‚èπÔ∏è Stoppe Pocket-Erkennung...');
      await this.unregisterLightSensorTask();
      console.log('‚úÖ Pocket-Erkennung gestoppt');
    } catch (error) {
      console.error('‚ùå Fehler beim Stoppen der Pocket-Erkennung:', error);
    }
  }

  /**
   * Gibt Debug-Informationen zur√ºck
   */
  public getDebugInfo(): object {
    return {
      isRegistered: this.isRegistered,
      isLightSensorRegistered: this.isLightSensorRegistered,
      motionTaskName: BACKGROUND_MOTION_TASK,
      lightTaskName: BACKGROUND_LIGHT_TASK,
      darkThreshold: DARK_THRESHOLD,
      currentPocketState,
      note: 'Erweiterte Version mit Lichtsensor-Unterst√ºtzung'
    };
  }
}

// Singleton-Instanz
export const backgroundTaskService = new BackgroundTaskService();
export default backgroundTaskService;
