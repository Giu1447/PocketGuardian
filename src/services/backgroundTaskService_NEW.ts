/**
 * Background-Task-Service f√ºr Hintergrundausf√ºhrung
 * SICHERHEITSMODUS: Vereinfacht f√ºr maximale Stabilit√§t
 */

import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_MOTION_TASK = 'background-motion-detection';

// Vereinfachter Background-Task f√ºr Stabilit√§t
TaskManager.defineTask(BACKGROUND_MOTION_TASK, async ({ data, error }) => {
  try {
    console.log('üîÑ Background-Task ausgef√ºhrt (vereinfacht):', new Date().toISOString());
    
    if (error) {
      console.error('Background-Task Fehler:', error);
      return BackgroundFetch.BackgroundFetchResult.Failed;
    }
    
    // Minimale Hintergrundaktivit√§t ohne Service-Abh√§ngigkeiten
    console.log('‚úÖ Hintergrund√ºberwachung l√§uft');
    return BackgroundFetch.BackgroundFetchResult.NoData;

  } catch (error) {
    console.error('‚ùå Kritischer Fehler im Background-Task:', error);
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
});

class BackgroundTaskService {
  private isRegistered = false;

  /**
   * Registriert Background-Tasks - Vereinfacht f√ºr Stabilit√§t
   */
  public async registerBackgroundTasks(): Promise<boolean> {
    try {
      // Pr√ºfe, ob Background-Fetch verf√ºgbar ist
      const status = await BackgroundFetch.getStatusAsync();
      if (status === BackgroundFetch.BackgroundFetchStatus.Restricted ||
          status === BackgroundFetch.BackgroundFetchStatus.Denied) {
        console.warn('‚ö†Ô∏è Background-Fetch nicht verf√ºgbar. Status:', status);
        return false;
      }

      // Pr√ºfe, ob Task bereits registriert ist
      const isAlreadyRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_MOTION_TASK);
      if (isAlreadyRegistered) {
        console.log('‚ÑπÔ∏è Background-Task bereits registriert');
        this.isRegistered = true;
        return true;
      }

      // Registriere Background-Fetch mit minimaler Konfiguration
      await BackgroundFetch.registerTaskAsync(BACKGROUND_MOTION_TASK, {
        minimumInterval: 60000, // 1 Minute f√ºr Stabilit√§t
        stopOnTerminate: false,
        startOnBoot: false, // Deaktiviert f√ºr Stabilit√§t
      });

      this.isRegistered = true;
      console.log('‚úÖ Background-Tasks erfolgreich registriert (vereinfacht)');
      return true;

    } catch (error) {
      console.error('‚ùå Fehler beim Registrieren der Background-Tasks:', error);
      this.isRegistered = false;
      return false;
    }
  }

  /**
   * Deregistriert Background-Tasks
   */
  public async unregisterBackgroundTasks(): Promise<void> {
    try {
      const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_MOTION_TASK);
      if (isRegistered) {
        await TaskManager.unregisterTaskAsync(BACKGROUND_MOTION_TASK);
        console.log('‚úÖ Background-Tasks deregistriert');
      }
      this.isRegistered = false;
    } catch (error) {
      console.error('‚ùå Fehler beim Deregistrieren der Background-Tasks:', error);
    }
  }

  /**
   * Startet Background-√úberwachung - Vereinfacht
   */
  public async startBackgroundMonitoring(): Promise<void> {
    try {
      console.log('üöÄ Starte Hintergrund√ºberwachung (vereinfacht)...');
      
      if (!this.isRegistered) {
        const success = await this.registerBackgroundTasks();
        if (!success) {
          console.warn('‚ö†Ô∏è Background-Tasks nicht verf√ºgbar');
          return;
        }
      }
      
      console.log('‚úÖ Hintergrund√ºberwachung aktiv');
    } catch (error) {
      console.error('‚ùå Fehler beim Starten der Hintergrund√ºberwachung:', error);
    }
  }

  /**
   * Stoppt Background-√úberwachung
   */
  public async stopBackgroundMonitoring(): Promise<void> {
    try {
      console.log('‚èπÔ∏è Stoppe Hintergrund√ºberwachung...');
      // Behalte Tasks registriert, aber deaktiviere √úberwachung
      console.log('‚úÖ Hintergrund√ºberwachung pausiert');
    } catch (error) {
      console.error('‚ùå Fehler beim Stoppen der Hintergrund√ºberwachung:', error);
    }
  }

  /**
   * Gibt den aktuellen Status zur√ºck
   */
  public async getBackgroundStatus(): Promise<{ available: boolean, registered: boolean, status: string }> {
    try {
      const status = await BackgroundFetch.getStatusAsync();
      const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_MOTION_TASK);
      
      return {
        available: status === BackgroundFetch.BackgroundFetchStatus.Available,
        registered: isRegistered,
        status: this.getStatusString(status)
      };
    } catch (error) {
      console.error('‚ùå Fehler beim Abrufen des Background-Status:', error);
      return {
        available: false,
        registered: false,
        status: 'Fehler'
      };
    }
  }

  /**
   * Konvertiert Status zu String
   */
  private getStatusString(status: BackgroundFetch.BackgroundFetchStatus): string {
    switch (status) {
      case BackgroundFetch.BackgroundFetchStatus.Available:
        return 'Verf√ºgbar';
      case BackgroundFetch.BackgroundFetchStatus.Denied:
        return 'Verweigert';
      case BackgroundFetch.BackgroundFetchStatus.Restricted:
        return 'Eingeschr√§nkt';
      default:
        return 'Unbekannt';
    }
  }

  /**
   * Gibt Debug-Informationen zur√ºck
   */
  public getDebugInfo(): object {
    return {
      isRegistered: this.isRegistered,
      taskName: BACKGROUND_MOTION_TASK,
      note: 'Vereinfachte Version f√ºr Stabilit√§t'
    };
  }
}

// Singleton-Instanz
export const backgroundTaskService = new BackgroundTaskService();
export default backgroundTaskService;
